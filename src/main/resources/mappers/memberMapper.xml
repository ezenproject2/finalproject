<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ezen.books.repository.MemberMapper">

    <select id="checkLoginIdDuplicate" resultType="boolean">
        select count(1) > 0 from member
        where login_id = #{loginId}
    </select>

    <insert id="insert" parameterType="com.ezen.books.domain.MemberVO">
        insert into member (login_id, password, email, name, phone_number, nick_name, auth ,gno)
        values (#{loginId}, #{password}, #{email}, #{name}, #{phoneNumber}, #{nickName}, 'ROLE_USER', '1')
    </insert>

    <select id="findByLoginId" resultType="com.ezen.books.domain.MemberVO">
        select * from member
        where login_id = #{loginId}
    </select>

    <select id="checkUser" resultType="com.ezen.books.domain.MemberVO">
        select count(*) from member
        where login_id = #{loginId} and password = #{password}
    </select>

    <select id="getMno" resultType="long">
        select mno from member
        where login_id = #{memberLoginId}
    </select>

    <insert id="saveTokens" parameterType="com.ezen.books.domain.MemberVO">
        insert into member (login_id, password, email, name, phone_number, nick_name, auth, gno, provider, provider_id)
        values (#{loginId}, #{password}, #{email}, #{name}, #{phoneNumber}, #{nickName}, 'ROLE_USER' , '1' ,#{provider}, #{providerId})
    </insert>

    <select id="existingPassword" resultType="com.ezen.books.domain.MemberVO">
        select password from member
        where login_id = #{loginId}
    </select>

    <update id="updateMember">
        update member
        <set>
            <if test="password != null">password = #{password},</if>
            <if test="email != null">email = #{email},</if>
            <if test="phoneNumber != null">phone_number = #{phoneNumber},</if>
            <if test="nickName != null">nick_name = #{nickName},</if>
        </set>
        where login_id = #{loginId}
    </update>

    <update id="deleteMember">
        update member
        set is_del = 'Y',
        delete_date = now()
        where login_id = #{loginId}
    </update>

    <!-- 최근 3개월 동안의 총 구매 내역 -->
    <select id="getTotalSpentInLast3Months" resultType="Double">
        select coalesce(sum(total_price), 0)
        from orders
        where mno = #{mno}
        and order_at >= date_sub(curdate(), Interval 3 month)
        and status = 'completed'
    </select>

    <!-- 회원 등급 업데이트 -->
    <update id="updateMemberGrade">
        update member
        set gno = #{gno}, grade_log = now()
        where mno = #{mno}
    </update>

    <!-- gno에 맞는 쿠폰 조회 -->
    <select id="getCouponsForGrade" resultType="com.ezen.books.domain.CouponVO">
        select * from coupon
        where gno = #{gno}
    </select>
    <!-- coupon_log에 쿠폰 기록 -->
    <insert id="insertCouponLog">
        insert into coupon_log (mno, cno, status, used_at, exp_at)
        values (#{mno}, #{cno}, '사용 가능', NULL, #{expAt})
    </insert>
    <!-- 기존 쿠폰 상태를 '만료'로 변경 -->
    <update id="updateCouponStatusToExpired">
        update coupon_log
        set status = '만료', used_at = now()
        where mno = #{mno} and status = '사용 가능';
    </update>


    <select id="getAllMembers" resultType="com.ezen.books.domain.MemberVO">
        select * from member
    </select>

    <!-- 회원 정보 조회 -->
    <select id="getMemberByInfo" resultType="com.ezen.books.domain.MemberVO">
        select * from member
        where login_id = #{loginId}
    </select>

    <select id="getMemberById" resultType="com.ezen.books.domain.MemberVO">
        select * from member
        where mno = #{mno}
    </select>

    <select id="findById" resultType="com.ezen.books.domain.MemberVO">
        select * from member
        where  provider_id = #{providerId}
    </select>
    
    <update id="updateLastLogin">
        update member
        set last_login = now()
        where login_id = #{loginId}
    </update>

    <select id="getLastMno" resultType="long">
        select max(mno) from member
    </select>

    <insert id="saveAddressToServer">
        insert into address (mno, rec_name, rec_phone, addr_code, addr, addr_detail, addr_name, is_default)
        values
        (#{mno}, #{recName}, #{recPhone}, #{addrCode}, #{addr}, #{addrDetail}, #{addrName}, #{isDefault})
    </insert>

</mapper>